class Node:
    def __init__(self, value, left = None, right = None, parent = None, height = 1):
        self.value = value
        self.left = left
        self.right = right
        self.parent = parent
        self.height = height

    
class BST:
    def __init__(self):
        self.root = None
        
    def height(self, node):
        if node is not None:
            return node.height
        return 0

    def bfactor(self, node):
        if node is not None:
            return self.height(node.left) - self.height(node.right)
        return 0
    
    def rotateRight(self, node):
        a = node.left
        b = a.right
        a.right = node
        node.left = b
        node.height = 1 + max(self.height(node.left), self.height(node.right))
        a.height = 1 + max(self.height(a.left), self.height(a.right))
        return a
    def rotateLeft(self, node):
        a = node.right
        b = a.left
        a.left = node
        node.right = b
        node.height = 1 + max(self.height(node.left), self.height(node.right))
        a.height = 1 + max(self.height(a.left), self.height(a.right))
        return a
    
    '''
    def fixheight(self, node):
        if self.height(node.right) > self.height(node.left):
            node.height = self.height(node.right) + 1
        else:
            node.height = self.height(node.left) + 1
        return node.height
    

    def balance(self, node):
        self.fixheight(node)
        if self.bfactor(node) >= 2:
            if self.bfactor(node.right) < 0:
                node.right = self.rotateRight(node.right)
                return self.rotateRight(node)
        
        if self.bfactor(node) <= -2:
            if self.bfactor(node.left) > 0:
                node.left = self.rotateLeft(node.left)
                return self.rotateLeft(node)
        return node
    '''

    def insert(self, value, root):
        if root is None:
            root = Node(value)
        elif value < root.value:
            root.left = self.insert(value, root.left)
        elif value > root.value:
            root.right = self.insert(value, root.right)

        root.height = 1 + max(self.height(root.left), self.height(root.right))
        bfactor = self.bfactor(root)
        if bfactor >= 2 and root.left.value > value:
            return self.rotateRight(root)
        if bfactor <= -2 and value > root.right.value:
            return self.rotateLeft(root)
        if bfactor >= 2 and value > root.left.value:
            root.left = self.rotateLeft(root.left)
            return self.rotateRight(root)
        if bfactor <= -2 and value < root.right.value:
            root.right = self.rotateRight(root.right)
            return self.rotateLeft(root)
        return root
bst = BST()
rt = None
rt = bst.insert(3, rt)
rt = bst.insert(5, rt)
rt = bst.insert(7, rt)
#rt.root.value
