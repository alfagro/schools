# класс с листом
class Node:
    def __init__(self, value, left=None, right=None, parent=None, height=1):
        self.value = value
        self.left = left
        self.right = right
        self.parent = parent
        self.height = height

    def hasLeftChild(self):
        if self.left is not None:
            return True
        return False

    def hasRightChild(self):
        if self.right is not None:
            return True
        return False

    def isRightChild(self):
        if self.parent.right == self:
            return True
        return False

    def isLeftChild(self):
        if self.parent.left == self:
            return True
        return False

    def isParent(self):
        if self.isRightChild() or self.isLeftChild():
            return True
        return False

    def hasBothChild(self):
        if self.hasRightChild() and self.hasLeftChild():
            return True
        return False

    def isRoot(self):
        if self.isParent is None:
            return True
        return False


# класс с авл деревом
class BST:
    def __init__(self):
        self.root = None

    def height(self, node):
        if node:
            return node.height
        return 0

    def bfactor(self, node):
        if node:
            return self.height(node.right) - self.height(node.left)
        return 0

    # малый правый поворот
    def rotateRight(self, p):
        q = Node(p.left)
        p.left = q.right
        q.right = p
        self.fixheight(p)
        self.fixheight(q)
        return q

    # малый левый поворот
    def rotateLeft(self, q):
        p = Node(q.right)
        q.right = p.left
        p.left = q
        self.fixheight(p)
        self.fixheight(q)
        return p



    def fixheight(self, node):
        if self.height(node.right) > self.height(node.left):
            node.height = self.height(node.right) + 1
        else:
            node.height = self.height(node.left) + 1
        return node.height

    def balance(self, node):
        self.fixheight(node)
        if self.bfactor(node) == 2:
            if self.bfactor(node.right) > 0:
                node.right = self.rotateRight(node.right)
            return self.rotateLeft(node)
        if self.bfactor(node) == -2:
            if self.bfactor(node.left) < 0:
                node.left = self.rotateLeft(node.left)
            return self.rotateRight(node)
        return node
    
    def insert(self, value):
        if self.root == None:
            self.root = Node(value)
        else:
            self._insert(value, self.root)

    def _insert(self, value, current_node):
        '''вставка'''
        if value > current_node.value:
            if current_node.right == None:
                current_node.right = Node(value, parent=current_node)
            else:
                self._insert(value, current_node.right)

        elif value < current_node.value:
            if current_node.left == None:
                current_node.left = Node(value, parent=current_node)
            else:
                self._insert(value, current_node.left)
        # баланс
        self.balance(current_node)

    def find(self, value):
        if self.root is None:
            return False
        return self._find(self.root, value)

    def _find(self, current_node, x):
        '''поиск'''
        if current_node.value == x:
            return True
        elif current_node.value > x and current_node.hasLeftChild():
            return self._find(current_node.left, x)
        elif current_node.value < x and current_node.hasRightChild():
            return self._find(current_node.right, x)
        return False

    def inOrder(self):
        if self.root is None:
            print('Tree Is Empty')
        else:
            return self.print_inOrder(self.root)

    def print_inOrder(self, x):
        if x is not None:
            self.print_inOrder(x.left)
            print(x.value)
            self.print_inOrder(x.right)

    def preOrder(self):
        if self.root is None:
            print('Tree Is Empty')
        else:
            self.print_preOrder(self.root)

    def print_preOrder(self, start):
        if start is not None:
            print(start.value)
            self.print_preOrder(start.left)
            self.print_preOrder(start.right)

    def postOrder(self):
        if self.root is None:
            print('Tree Is Empty')
        else:
            return self.print_postOrder(self.root)

    def print_postOrder(self, start):
        if start is not None:
            self.print_postOrder(start.left)
            self.print_postOrder(start.right)
            print(start.value)

    def size(self):
        if self.root is not None:
            return self._size(self.root)
        return 'Tree Is Empty'

    def _size(self, cur_node):
        if cur_node != None:
            return self._size(cur_node.left) + 1 + self._size(cur_node.right)
        return 0

    def deep(self):
        if self.root is not None:
            return self._deep(self.root)
        return 'Tree Is Empty'

    def _deep(self, cur_node):
        if cur_node is not None:
            return 1 + max(self._deep(cur_node.left), self._deep(cur_node.right))
        return 0


bst = BST()
data = []
while True:  # ввод и вывод
    a = input()
    if a.find('insert') != -1:
        data.append(int(a[7:]))
        bst.insert(int(a[7:]))
    elif a.find('find') != -1:
        print(bst.find(int(a[5:])))
    elif a == 'stop':
        break
    elif a == 'height':
        print(bst.deep())
    elif a == 'size':
        print(bst.size())
    elif a == 'root':
        if bst.root is not None:
            print(bst.root.value)
        else:
            print('Tree Is Empty')
    elif a == 'print inOrder':
        bst.inOrder()
    elif a == 'print preOrder':
        bst.preOrder()
    elif a == 'print postOrder':
        bst.postOrder()
    elif a == 'max':
        if data != []:
            print(max(data))
        else:
            print('Tree Is Empty')
    elif a == 'min':
        if data != []:
            print(min(data))
        else:
            print('Tree Is Empty')
